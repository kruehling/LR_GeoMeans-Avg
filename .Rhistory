setwd("~/Dropbox/WRP_Ecoli/Data")
library(dplyr)
library(tidyr)
require(dplyr)
require("dplyr")
library(tidyverse)
library("tidyverse")
install.packages("dplyr")
install.packages("tidyr")
install.packages("tidyverse")
install.packages("readr")
install.packages("magrittr")
install.packages("magrittr")
library(dplyr)
library(tidyr)
library(tidyverse)
library(readr)
library(magrittr)
master<-read.csv("Master_datasheet.csv")
print(master)
str(master)
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603))+geom_point()+scale_x_log10()
masterWide<-master %>% spread(key = "parameter",value= "value")
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603))+geom_point()+scale_x_log10()
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603))+geom_point()+scale_x_log10()+scale_y_log10()
ggplot(masterWide, aes(x=Ec1603, y= Turbidity))+geom_point()
str(masterWide)
#l
ggplot(masterWide, aes(x=Ec1603, y= Turbidity))+geom_point()+scale_y_log10()
str(masterWide)
View(master)
EC<-master %>% filter(parameter == Ec1603, EcIDEXX)
EC<-master %>% filter(parameter == "Ec1603", "EcIDEXX")
EC<-master %>% filter(master, parameter == "Ec*")
EC<-master %>% filter(master, parameter == "Ec1603")
EC<-master %>% filter(master, parameter == "Ec1603", preserve = FALSE)
rlang::last_error()
EC<-master %>% filter( parameter == "Ec1603", preserve = FALSE)
View(EC)
master %>% filter( parameter == "Ec1603", preserve = FALSE)
master %>% filter(parameter == "Ec1603")
master %>% filter(parameter == "Ec1603" & "EcIDEXX")
master %>% filter(parameter == "Ec1603", "EcIDEXX")
master %>% filter(parameter == "Ec1603" && "EcIDEXX")
master %>% filter(parameter = "Ec1603" && "EcIDEXX")
master %>% filter(parameter == "Ec1603" && "EcIDEXX")
View(master)
master %>% filter(parameter == "EcIDEXX")
install.packages("tbrf")
library(tbrf)
IDEXX<- master %>% filter(parameter == "EcIDEXX") %>% group_by(date, site)
View(IDEXX)
IDEXX<- master %>% filter(parameter == "EcIDEXX") %>% group_by(site, date)
View(IDEXX)
IDEXX<- master %>% filter(parameter == "EcIDEXX") %>% group_by(site) %>% arrange(dsc(date)
View(IDEXX)
View(IDEXX)
View(IDEXX)
IDEXX<- master %>% filter(parameter == "EcIDEXX" or "Ec1603") %>% group_by(site) %>% arrange(dsc(date)
View(IDEXX)
master %>% filter(parameter == "Ec1603" | "EcIDEXX")
rlang::last_error()
filter(master, parameter == "Ec1603" | "EcIDEXX")
filter(master, parameter == "Ec1603" | parameter == "EcIDEXX")
View(master)
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%Y", tz = "UTC"))
ENU<- master %>% filter(parameter == "Ec1603" | parameter == "EcIDEXX")
View(ENU)
View(ENU)
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
ENU<- master %>% filter(parameter == "Ec1603" | parameter == "EcIDEXX")
View(ENU)
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%20y", tz = "UTC"))
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%_y", tz = "UTC"))
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%Y", tz = "UTC"))
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
master<- master %>% mutate(date = strptime(date, format = "%m/%d/%y", tz = "UTC"))
View(master)
View(master)
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
master<-read.csv("Master_datasheet.csv")
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
ENU<- master %>% filter(parameter == "Ec1603" | parameter == "EcIDEXX")
%>% group_by(site) %>% arrange(dsc(date))
%>% group_by(site) %>% arrange(dsc(date))
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(site) %>% arrange(dsc(date))
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(site) %>% arrange(date)
View(EC)
View(ENU)
ENUwide<- ENU %>% spread(key = "parameter",value= "value")
View(ENUwide)
View(ENUwide)
ENU %>% group_by(parameter, site, date) %>% summarise(Rep_avg= mean(replicate))
View(ENU)
ENU %>% group_by(parameter, site, date, replicate) %>% summarise(Rep_avg= mean(value))
View(ENU)
ENU_rep<- spread(key = "replicate",value= "value")
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value")
View(ENU_rep)
View(ENU_rep)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
rename("1" = rep1, "2"= rep2, "3"= rep3)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
rename("1" = "rep1", "2"= "rep2", "3"= "rep3")
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
rename(1 = rep1, 2= rep2, 3= rep3)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
ENU_rep %>% rename(1 = rep1, 2 = rep2, 3 = rep3)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
ENU_rep %>% rename(ENU_rep, 1 = rep1, 2 = rep2, 3 = rep3)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
ENU_rep %>% rename(ENU_rep, 1 = rep1)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
ENU_rep %>% rename( 1 = rep1)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>%
ENU_rep %>% rename( "1" = "rep1")
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value")
ENU_rep %>% rename( "1" = "rep1")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("dbplyr")
install.packages("dbplyr")
library(dbplyr)
ENU_rep %>% rename_with( 1 = rep1)
ENU_rep %>% rename( 1 = rep1)
ENU_rep %>% rename( 1=rep1)
ENU_rep %>% rename(ENU_rep, 1=rep1)
(mutate(Avg= mean(value))
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
(mutate(Avg= mean(value))
View(ENU_rep)
(mutate(Avg= mean(c(1,2,3,4)))
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
drop_na() %>% mutate(Avg= mean(c(1,2,3,4)))
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
drop_na(1, 2, 3, 4) %>% mutate(Avg= mean(c(1,2,3,4)))
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX")
master<-read.csv("Master_datasheet.csv")
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
library(dplyr)
library(tidyr)
library(tidyverse)
library(readr)
library(magrittr)
library(tbrf)
library(dbplyr)
setwd("~/Dropbox/WRP_Ecoli/Data")
master<-read.csv("Master_datasheet.csv")
master<-read.csv("Master_datasheet.csv")
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX")
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
drop_na(1, 2, 3, 4) %>% mutate(Avg= mean(c(1,2,3,4)))
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
rename(1= rep1)
#trying to average reps
ENU_rep<-ENU %>%  spread(key = "replicate",value= "value") %>% group_by(site, date) %>%
rename(ENU_rep$1 = rep1)
ENU_rep %>% rename(ENU_rep$1 = rep1)
ENU_rep %>% rename(ENU_rep$1 = "rep1")
ENU_rep %>% rename(1 = "rep1")
%>% summarise(Rep_avg = mean(value))
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(site, date) %>% arrange(desc(replicate))%>%
summarise(Rep_avg = mean(value))
View(ENU)
View(ENU)
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(parameter, site, date) %>%
arrange(desc(replicate))%>% mutate(Rep_avg = mean(value))
View(ENU)
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(parameter,date, site) %>%
arrange(desc(replicate))%>% mutate(Rep_avg = mean(value))
View(ENU)
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(parameter,date, site) %>% mutate(Rep_avg = mean(value))
View(ENU)
ENU_avg<- ENU %>% mutate(date, site, parameter, Rep_avg)
View(ENU_avg)
ENU_avg<- ENU %>% selet(date, site, parameter, Rep_avg)
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(parameter,date, site) %>% mutate(Rep_avg = mean(value))
ENU_avg<- ENU %>% selet(date, site, parameter, Rep_avg)
ENU_avg<- ENU %>% select(date, site, parameter, Rep_avg)
View(ENU_avg)
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1)
View(ENU_avg)
tbr_gmean(ENU_avg, Rep_avg, date, unit = "weeks", n=6)
tbr_gmean(ENU_avg, x= Rep_avg, tcolumn =  date, unit = "weeks", n=6)
Geo<-tbr_gmean(ENU_avg, x= Rep_avg, tcolumn =  date, unit = "weeks", n=6)
View(Geo)
View(Geo)
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(parameter, date, site)
Geo<-tbr_gmean(ENU_avg, x= Rep_avg, tcolumn =  date, unit = "weeks", n=6)
View(ENU_avg)
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(parameter, site, date)
View(ENU_avg)
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(parameter, site) %>% arrange(desc(date))
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(parameter, site)
View(ENU_avg)
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(site, parameter)
View(ENU_avg)
ENU_avg %>% group_by(site, parameter)
ENU_avg %>% group_by(site)
View(ENU_avg)
#New df without substrate and one value per Enumeration test
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>% group_by(site)
View(ENU_avg)
#New df without substrate and one value per Enumeration test
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>%
group_by(c("LR-LL2", "LR-LR1", "LR-LR2", "LR-LR3", "LR-LR4","LR-LL1", "LR-WC2"))
View(ENU_avg)
#New df without substrate and one value per Enumeration test
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>%
arrange(site)
View(ENU_avg)
#New df without substrate and one value per Enumeration test
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>%
arrange(site, date)
Geo<-tbr_gmean(ENU_avg, x= Rep_avg, tcolumn =  date, unit = "weeks", n=6)
View(Geo)
library(dplyr)
library(tidyr)
library(tidyverse)
library(readr)
library(magrittr)
install.packages("tbrf")
install.packages("dbplyr")
install.packages("dbplyr")
library(tbrf)
library(dbplyr)
setwd("~/Dropbox/WRP_Ecoli/Data")
#load master and reformate date and time
master<-read.csv("Master_datasheet.csv")
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
library(tidyverse)
master<- master %>% mutate(date = as.POSIXct(date, format = "%m/%d/%y", tz = "UTC"))
#Create new column with avg of replicates
ENU<- master %>%
filter(parameter == "Ec1603" | parameter == "EcIDEXX") %>%
group_by(parameter,date, site) %>% mutate(Rep_avg = mean(value))
#New df without substrate and one value per Enumeration test
ENU_avg<- ENU %>% select(date, site, parameter, replicate, Rep_avg) %>%
filter(replicate == 1) %>%
arrange(site, date)
read.csv(ENU_avg,EnumerationAvgs.csv)
read.csv(ENU_avg, "EnumerationAvgs.csv")
read.csv(ENU_avg, 'EnumerationAvgs.csv')
write.csv(ENU_avg, 'EnumerationAvgs.csv')
load("~/Dropbox/WRP_Ecoli/Data/Laramie River/Raw Data/GeoMeansEnumerations.csv")
setwd("~/Dropbox/WRP_Ecoli/Data/Laramie River/Raw Data")
means<- read.csv("GeoMeansEnumerations.csv")
View(means)
#graphics
library(ggplot2)
means<- read.csv("GeoMeansEnumerations.csv")
ggplot(means, aes(x= GM, y= Value), color= site)+geom_abline()
ggplot(means, aes(x= GM, y= Value), color= site)+geom_density()
rlang::last_error()
ggplot(means, aes(x= GM, y= Value), color= site)+geom_line()
View(means)
ggplot(means, aes(x= GM, y= Value), color= Site)+geom_line()
ggplot(means, aes(x= GM, y= Value), color= Site)+geom_point()
ggplot(means, aes(x= GM, y= Value), color= Site)+geom_smooth()
ggplot(means, aes(x= GM, y= Value))+geom_line(color= Site)
#make master sheet horizontal
masterWide<-master %>% spread(key = "parameter",value= "value")
library(dplyr)
library(tidyr)
library(tidyverse)
library(readr)
library(magrittr)
#make master sheet horizontal
masterWide<-master %>% spread(key = "parameter",value= "value")
#log scale scatter of enumeration methods
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603))+geom_point()+scale_x_log10()+scale_y_log10()
View(masterWide)
#log scale scatter of enumeration methods
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603), color= site)+geom_point()+scale_x_log10()+scale_y_log10()
ggplot(means, aes(x= GM, y= Value))+geom_line(aes(color = site))
ggplot(means, aes(x= GM, y= Value))+geom_line(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_quantile(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_smooth(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_bar(aes(color = Site))
ggplot(means, aes() y= Value))+geom_bar(aes(color = Site))
ggplot(means, aes() y= Value))+geom_line(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_histogram(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_bar(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_line(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_point(aes(color = Site)) +geom_smooth()
ggplot(means, aes(x= GM, y= Value))+geom_density(aes(color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_density(aes(y= value, color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_density(aes(y= Value, color = Site))
rlang::last_error()
ggplot(means, aes(x= GM, y= Value))+geom_area(aes( color = Site))
ggplot(means, aes(x= GM, y= Value))+geom_line(aes( color = Site, linejoin= round()))
ggplot(means, aes(x= GM, y= Value))+geom_line(aes( color = Site, linejoin= "round"))
ggplot(means, aes(x= GM, y= Value))+geom_point(aes( color = Site)) +geom_abline()
ggplot(means, aes(x= GM, y= Value))+geom_point(aes( color = Site)) +geom_line()
ggplot(means, aes(x= GM, y= Value))+geom_point(aes( color = Site)) +geom_line(color= Site)
ggplot(means, aes(x= GM, y= Value))+geom_point(aes( color = Site)) +geom_line(aes(color= Site))
meansWide<- means %>% spread(key = "parameter",value= "value")
meansWide<- means %>% spread(key = "Parameter",value= "Value")
View(meansWide)
ggplot(means, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid"))
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid"))
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid")) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed", size= 3)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid", size= 3)) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed", size= 1.5)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid", size= 1.5)) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "dashed")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "solid")) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "soild")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+ guides(color= "Site", linetype= c("Ec1603", "EcIDEXX"))
ggplot(meansWide, aes(x= GM, y= Ec1603))+geom_line(aes( color = Site, linetype= "soild")) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+ scale_fill_discrete(name= "Parameter", labelslinetype= c("Ec1603", "EcIDEXX"))
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+ scale_fill_discrete(name= "Parameter", labels= c("Ec1603", "EcIDEXX"))
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+
labs(title = "Geometric means for IDEXX and 1603 E. coli Enumeration",
y="CFU/100ml", x="Rolling Geometric Means")
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+
labs(title = "Geometric means for IDEXX and 1603 E. coli Enumeration Laramie River",
y="CFU/100ml", x="Rolling Geometric Means")
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+
labs(title = "Geometric means for IDEXX and 1603 E. coli Enumeration Laramie River",
y="CFU/100ml", x="Rolling Geometric Means")+
scale_fill_discrete(name= "Parameter", labels= c("Ec1603", "EcIDEXX"))
#log scale scatter of enumeration methods
ggplot(masterWide, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+scale_x_log10()+scale_y_log10()
wdNoFB<- masterWide %>% filter(site != LR=BlankDI, site != LR-FB)
wdNoFB<- masterWide %>% filter(site ! LR=BlankDI, site ! LR-FB)
wdNoFB<- masterWide %>% filter(site ! LR-BlankDI, site ! LR-FB)
wdNoFB<- masterWide %>% filter(site != LR-BlankDI, site != LR-FB)
wdNoFB<- masterWide %>% filter(site != "LR-BlankDI", site != "LR-FB")
View(wdNoFB)
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5, 200)
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10(-5, 200)
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,)
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,200)
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,200)+
theme_minimal()
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,200)+
theme_classic()
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,200)+
theme_light()
#log scale scatter of enumeration methods
ggplot(wdNoFB, aes(x=EcIDEXX , y= Ec1603))+geom_point(aes(color= site))+
scale_x_log10()+scale_y_log10()+ ylim(-5,200)+
theme_light()+
ggtitle("E. coli Enumeration methods Laramie River Summer 2020")
#plot dashed/solid lines for different parameters
ggplot(meansWide, aes(x= GM, y= Ec1603, linetype= "soild"))+geom_line(aes( color = Site)) +
geom_line(aes(y= EcIDEXX, color= Site, linetype= "dashed")) +
theme_minimal()+
labs(title = "Geometric means for IDEXX and 1603 E. coli Enumeration Laramie River",
y="CFU/100ml", x="Rolling Geometric Means")
View(means)
geomod<- aov(Value ~ Parameter, data= means)
summary(geomod)
geores<- residuals(geomod)
hist(geores)
shapiro.test(geores)
leveneTest(means$Value ~ means$Parameter)
library(stats)
leveneTest(means$Value ~ means$Parameter)
library(car)
leveneTest(means$Value ~ means$Parameter)
bartlett.test(means$Value ~ means$Parameter)
#log transform the data to see if we can increase residual error
geomod_log<- aov(log(Value)~ Parameter, data= means)
summary(geomod_log)
geores_log<- residuals(geomod_log)
hist(geores_log)
shapiro.test(geores_log)
TukeyHSD(geomod, "Parameter")
#concern about residual error - going to try a non-parametric comparison
wilcox.test(means$Value ~ means$Parameter)
